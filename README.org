#+title: Inforest
#+startup: <l>

* Propuesta Inicial
La visualizacion ideada en un principio consistia
en una estructura arborea que se bifurcaba a medida
que avanzaba en la estructura de carpetas. Al llegar
a la profundidad maxima se generaria una "hoja" que
poseeria los datos del archivo.
La estructura de este arbol estaba dada por la carpeta
del drive de la materia

*** TODO IMAGE

* Desarrollo y Conceptualizacion
Con esta propuesta como base decidimos 
cambiar ciertas partes para que comprendan
una estructura mas amplia que el drive de la materia.

Estos eran los nodos por defecto:
|         <c>         | <l>          |
| Profundidad de Nodo | Nombre       |
|---------------------+--------------|
|          1          | Tronco comun |
|          2          | Alumnxs      |
|          3          | Cuatrimestre |
|          4          | Trabajos     |
|          5          | Archivos     |


Los cuales pasarian a ser:
|         <c>         | <l>                              |
| Profundidad de Nodo | Nombre                           |
|---------------------+----------------------------------|
|          1          | A単o de cursada                   |
|          2          | Alumxns                          |
|          3          | Trabajos                         |
|          4          | Archivos*                        |
*Este nodo es opcional, podria representarse de diferentes maneras,
ej; que aumente el tama単o del nodo cuatro cuanto mas archivos tenga (en caso de ser una carpeta)

*** TODO IMAGE
** Arbol y Bosque
La estrucura de nodos desde la raiz(primer nodo) a la hoja(ultimo nodo) seria un arbol,
multiples arboles formarian un bosque, ej; visualizacion de multiples arboles, la raiz de cada uno
siendo el a単o de cursada (2018, 2019, 2020).
*** TODO IMAGE

** Raiz
El primer nodo y la base del arbol, se dispondria de la capacidad de cambiar de raiz
que produciria un nuevo arbol desde el nodo deseado. Ej; hacer click en una 

** Hojas y Tags
El ultimo nodo; representa los trabajos de lxs estudiantes, estos tendrian acceso al link del tp
e informacion adicional en la forma de =tags=.
Los tags o etiquetas ayudarian a dar sentido a la informacion y cualquier nodo no visible
se veria representado como tags en las hojas y todo tag podria seleccionarse
conviritendose en un nodo raiz

Es en la relacion de los tags entre si y los parametros que controlan donde yace el potencial
de la generacion de distintos arboles

** Semillas - filtrado de data
Va a haber informacion que no queramos ver por lo tanto deberiamos ser capaces de filtrar
los trabajos con ciertos tags (o solo ver trabajos de ciertos tags),
la combinacion de estas opciones seria la semilla ya que afecta en la generacion de un nuevo 

* Posibles Implementaciones
Nosotros implementamos una version muy simple de esta idea, sin tags, ni bosques, ni raices seleccionables.
La idea era ver las posibilidades de visualizacion pasando de una base de datos a un grafo web.
Utilizamos la libreria d3 para generar un grafico de arbol con una base de datos peque単a para
ver como se adecua la misma al concepto que estamos trabajando
*** TODO LINK AL TRABAJO


* Descripcion del Codigo
** HTML
#+begin_src html :tangle index.html
  <!DOCTYPE html>
  <html>
    <head>
      <title> [nombre abierto a sugerencias] </title>
      <link href"style.css" rel="stylesheet" type="text/css">
    </head>
    <div>
      <svg id="graph"></svg>
    </div>
    <div id="tooltip"></div>
    </body>
  </html>

  <script src="https://d3js.org/d3.v6.min.js"></script>
  <script src="sketch.js"></script>
#+end_src

** CSS
#+begin_src css :tangle style.css
/*por ahora la seccion de css no cumple ninguna funcion*/
  .container {
      width: 250px;
      height: 200px}
#+end_src

** Javascript

*** Definicion de dataset
#+begin_src javascript :tangle sketch.js
  let dataset = {"id": "Generacion 0",
		 "children": [
		     {"id": "FALCHETTI Santino",
		      "children": [
			  {"id": "TPs cuatrimestre V",
			   "children": [
			       {"id": "tp3"},
			       {"id": "tp2"}
			   ]}
		      ]},
		   {"id": "ALVAREZ FREIJOMIL Facundo Tomas",
		    "children": [
			{"id": "TPs cuatrimestre V",
			 "children":[
			     {"id": "tp1",
			      "children": [
				  {"id": "01.jpg"},
				  {"id": "02.jpg"},
				  {"id": "03.jpg"}
			      ]},
			     {"id": "tp2"}
			 ]},
		    ]
		   },
		   {"id": "MEDAN FRANZESE Martin Ignacio",
		    "children": [
			{"id": "TPs cuatrimestre V",
			 "children": [
			     {"id": "tp1"}
			 ]}
		    ]},
		     {"id": "AHUMADA Daniel Gerardo",
		      "children": [
			  {"id": "TPs cuatrimestre V",
			   "children": [
			       {"id": "tp1"},
			       {"id": "tp3"},
			       {"id": "tp4"}
			   ]}

		      ]}
	       ]};

#+end_src

*** Definicion de parametros y grafo
#+begin_src javascript :tangle sketch.js
    const WIDTH = 800;
    const HEIGHT = 600;
    const margin = {top:0, right: 0, bottom: 70, left: 0}

    const innerWidth = WIDTH - margin.left - margin.right;
    const innerHeight = HEIGHT - margin.top - margin.bottom;

     let tooltip = d3.select("#tooltip")
	.style("position", "absolute")
	.style("visibility", "hidden");


    let graph = d3.select("#graph");
    graph = graph
	.attr("viewBox", `0 0 ${WIDTH + margin.left + margin.right} ${HEIGHT + margin.top + margin.bottom}`)
      .style("max-width", WIDTH)
      .style("max-height", HEIGHT)
	.append("g")
	.attr("transform", `translate(${margin.left}, ${margin.top})`);

    const treeLayout = d3.tree().size([innerWidth, innerHeight])
    const root = d3.hierarchy(dataset);
    const links = treeLayout(root).links();
    const linkPaths = d3.linkVertical()
	  .x(d => d.x)
	  .y(d => HEIGHT - d.y)
#+end_src

*** Modificacion visual del grafo
#+begin_src javascript :tangle sketch.js
    graph.append("g")
      .attr("fill", "none")
      .selectAll("path")
      .data(links)
      .join("path").attr("d", linkPaths)
      .data(root.descendants())
      .attr("stroke", "teal")
      .attr("stroke-width", d => 25 - d.depth * 5)
      .attr("opacity", d => 1 - d.depth*0.2);

     graph.append("g")
	.selectAll("circle")
	.data(root.descendants())
	.join("circle")
	.attr("r", d => 60 - d.depth * 12)
	.attr("transform", d => `translate(${d.x},${HEIGHT - d.y})`)
	.attr("fill", d => d3.hsl(55 * d.depth, 1, 0.2 + d.depth * 0.07))
	.on("mouseover", (_, d) => tooltip.style("visibility", "visible")
	    .text(d.data.id).style("font-size", "1.2rem"))
	.on("mousemove", (_, d) => tooltip.style("top", (event.y-10)+"px")
	    .style("left",(event.pageX+10)+"px"))
	.on("mouseout", () => tooltip.style("visibility", "hidden"));

    // graph.append("g")
    //     .attr("font-family", "sans-serif")
    //     .attr("text-anchor", "middle")
    //     .selectAll("text")
    //     .data(root.descendants())
    //     .join("text")
    //     .attr("transform", d => `translate(${d.x},${HEIGHT - d.y})`)
    //     .text(d => d.data.id)
    //     .attr("font-size", d => 2 - (d.depth * 0.4) + "rem");

#+end_src














